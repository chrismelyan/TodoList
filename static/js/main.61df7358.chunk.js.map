{"version":3,"sources":["TodoListHeader.tsx","EditableSpan.tsx","Task.tsx","TasksList.tsx","Buttons.tsx","InputForm.tsx","TodoListForm.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoListHeader","props","text","filter","className","title","EditableSpan","useState","edit","setEdit","setTitle","value","onChange","e","currentTarget","autoFocus","onBlur","callbackUpdate","onDoubleClick","Task","spanClass","isDone","type","changeTaskStatus","todolistID","id","checked","onClick","removeTask","TasksList","tasksComponents","tasks","map","task","key","taskID","updateTask","updateTaskHandler","length","Buttons","onClickSetFilter","changeFilter","InputForm","callbackAddValue","error","setError","onClickAddTask","trimmedTitle","trim","errorMessage","style","color","fontSize","inputClass","onKeyPress","TodoListForm","addTask","TodoList","display","removeTodolist","App","todolistID_1","v1","todolistID_2","todolist","setTodolist","setTasks","el","updateTodolist","todoList","find","tl","newID","allTodolistTasks","tasksForTodolist","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.61df7358.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\nimport {FilterValuesType} from \"./App\";\n\ntype TodoListHeaderPropsType = {\n    title: string\n    filter?: FilterValuesType\n}\nconst TodoListHeader = (props: TodoListHeaderPropsType) => {\n    let text = 'all'\n    switch (props.filter) {\n        case 'active':\n            text = 'act'\n            break\n        case 'completed':\n            text = 'cmp'\n            break\n    }\n    return <h3\n        className={'header'}>{props.title}\n        {props.filter && <span className={'filter-header'}>{text}</span>}\n    </h3>\n};\n\nexport default TodoListHeader;","import React, {ChangeEvent, useState} from 'react';\n\ntype EditableSpanType = {\n    title: string\n    callbackUpdate: (title: string) => void\n    className: string\n}\n\nconst EditableSpan = (props: EditableSpanType) => {\n    const [edit, setEdit] = useState<boolean>(false);\n    const [title, setTitle] = useState<string>('')\n\n    const onDoubleClickHandler = () => {\n        setEdit(true)\n        setTitle(props.title)\n    }\n\n    const OnBlurHandler = () => {\n        props.callbackUpdate(title)\n        setEdit(false)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n            edit\n            ? <input value={title} onChange={onChangeHandler} autoFocus onBlur={OnBlurHandler}/>\n            : <span className={props.className} onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n    );\n};\n\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\nimport {TaskType} from \"./TodoList\";\nimport EditableSpan from \"./EditableSpan\";\n\ntype TaskPropsType = TaskType & {\n    todolistID: string\n    removeTask: (todolistID: string, taskID: string) => void\n    changeTaskStatus: (todolistID: string, taskID: string, isDone: boolean) => void\n    callbackUpdate: (title: string) => void\n}\n\nconst Task = (props: TaskPropsType) => {\n    // let taskClass = `task ${props.isDone ? 'completed-task' : ''}`\n    // let classes = ['task']              // className={'task completed-task'} - два класса на спане. ClassName возвращает строку!!!\n    // if(props.isDone) {\n    //     classes.push('completes-task')\n    // }\n\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        // props.changeTaskStatus(props.id, !props.isDone) - почему работает\n        props.changeTaskStatus(props.todolistID, props.id, e.currentTarget.checked)\n    }\n\n    const spanClass = `span ${props.isDone ? 'completed-task' : ''}`\n\n    return (\n        <li>\n            <div className={'task'}>\n                <div className={'item'}>\n                    <input type=\"checkbox\" onChange={changeTaskStatus} checked={props.isDone}/>\n                    <EditableSpan className={spanClass} title={props.title} callbackUpdate={props.callbackUpdate}/>\n                </div>\n                <button className={'button-sign'} onClick={() => props.removeTask(props.todolistID, props.id)}>x</button>\n            </div>\n        </li>\n    );\n};\n\nexport default Task;","import React from 'react';\nimport './App.css'\nimport Task from \"./Task\";\nimport {TaskType} from \"./TodoList\";\n\ntype TasksListPropsType = {\n    tasks: TaskType[]\n    todolistID: string\n    removeTask: (todolistID: string, taskID: string) => void\n    changeTaskStatus: (todolistID: string, taskID: string, isDone: boolean) => void\n    updateTask: (todolistID: string, taskID: string, title: string) => void\n}\n\n//отрисовывает список соответсвенно колличеству тасков\n// (преобразовываем массивы одного типа в массивы другого типа)\nconst TasksList = (props: TasksListPropsType) => {\n    const updateTaskHandler = (taskID: string, title: string) => {\n        props.updateTask(props.todolistID, taskID, title)\n    }\n    const tasksComponents = props.tasks.map(task => {\n        return <Task\n            todolistID={props.todolistID}\n            key={task.id}\n            {...task}\n            removeTask={props.removeTask}\n            changeTaskStatus={props.changeTaskStatus}\n            callbackUpdate={(title) => updateTaskHandler(task.id, title)}\n        />\n    })\n\n    return (tasksComponents.length\n        ? <ul>\n            {tasksComponents}\n        </ul>\n            : <span className={'empty-list'}>Task list is empty</span>\n    );\n};\n\nexport default TasksList;","import React from 'react';\nimport {FilterValuesType} from \"./App\";\n\ntype ButtonsType = {\n    todolistID: string\n    changeFilter: (todolistID: string, filter: FilterValuesType) => void\n    filter: FilterValuesType\n}\n\nconst Buttons = (props: ButtonsType) => {\n    const onClickSetFilter = (filter: FilterValuesType) => () => props.changeFilter(props.todolistID, filter)\n    return (\n        <div>\n            <button className={props.filter === 'all' ? 'button-active' : ''} onClick={onClickSetFilter('all')}>All</button>\n            <button className={props.filter === 'active' ? 'button-active' : ''} onClick={onClickSetFilter('active')}>Active</button>\n            <button className={props.filter === 'completed' ? 'button-active' : ''} onClick={onClickSetFilter('completed')}>Completed</button>\n        </div>\n    );\n};\n\nexport default Buttons;","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\n\n\ntype InputFormType = {\n    callbackAddValue: (title: string) => void\n}\nconst InputForm: React.FC<InputFormType> = ({callbackAddValue}) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<boolean>(false)\n\n    const onClickAddTask = () => {\n        const trimmedTitle = title.trim()\n        if (trimmedTitle) {\n            callbackAddValue(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle('')\n    }\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressSetTitle = (e: KeyboardEvent<HTMLInputElement>) => {\n        e.key === 'Enter' && onClickAddTask()\n    }\n\n    const errorMessage = error && <div style={{color: 'red', fontSize: '10px'}}>Title is required</div>\n    const inputClass = `input ${error ? 'error' : ''}`\n\n    return (\n        <div>\n            <input\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressSetTitle}\n                className={inputClass}\n            />\n            <button className={'button-sign'} onClick={onClickAddTask}>+</button>\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default InputForm;\n\n","import React from 'react';\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport InputForm from \"./InputForm\";\nimport {TaskType} from \"./TodoList\";\nimport {FilterValuesType} from \"./App\";\n\ntype TodoListFormPropsType = {\n    tasks: TaskType[]\n    filter: FilterValuesType\n    todolistID: string\n    removeTask: (todolistID: string, taskID: string) => void\n    changeFilter: (todolistID: string, filter: FilterValuesType) => void\n    addTask: (todolistID: string, title: string) => void\n    changeTaskStatus: (todolistID: string, taskID: string, isDone: boolean) => void\n    updateTask: (todolistID: string, taskID: string, title: string) => void\n}\n\nconst TodoListForm = (props: TodoListFormPropsType) => {\n    const callbackAddValue = (title: string) => {\n        props.addTask(props.todolistID, title)\n    }\n\n    return (\n        <div>\n            <InputForm\n                callbackAddValue={callbackAddValue}\n            />\n            <TasksList\n                todolistID={props.todolistID}\n                tasks={props.tasks}\n                removeTask={props.removeTask}\n                changeTaskStatus={props.changeTaskStatus}\n                updateTask={props.updateTask}\n            />\n            <Buttons\n                todolistID={props.todolistID}\n                changeFilter={props.changeFilter}\n                filter={props.filter}\n            />\n        </div>\n    );\n};\n\nexport default TodoListForm;","import React from 'react';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListForm from \"./TodoListForm\";\nimport {FilterValuesType} from \"./App\";\n\ntype TodoListPropsType = {\n    title: string\n    todolistID: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (todolistID: string, taskID: string) => void\n    changeFilter: (todolistID: string, filter: FilterValuesType) => void\n    addTask: (todolistID: string, title: string) => void\n    removeTodolist: (todolistID: string) => void\n    changeTaskStatus: (todolistID: string, taskID: string, isDone: boolean) => void\n    updateTask: (todolistID: string, taskID: string, title: string) => void\n    updateTodolist: (todolistID: string, title: string) => void\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nconst TodoList = (props: TodoListPropsType) => {\n    return (\n        <div>\n            <div style={{display: 'flex'}}>\n                <TodoListHeader title={props.title} filter={props.filter}/>\n                <button className={'button-sign'} onClick={() => props.removeTodolist(props.todolistID)}>x</button>\n            </div>\n            <TodoListForm\n                todolistID={props.todolistID}\n                tasks={props.tasks}\n                removeTask={props.removeTask}\n                changeFilter={props.changeFilter}\n                addTask={props.addTask}\n                filter={props.filter}\n                changeTaskStatus={props.changeTaskStatus}\n                updateTask={props.updateTask}\n            />\n        </div>\n    );\n};\n\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport InputForm from \"./InputForm\";\r\nimport TodoListHeader from \"./TodoListHeader\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolistID_1 = v1();\r\n    const todolistID_2 = v1();\r\n\r\n    const [todolist, setTodolist] = useState<TodolistType[]>([\r\n        {id: todolistID_1, title: \"Things to learn\", filter: 'all'},\r\n        {id: todolistID_2, title: 'Things to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: false},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"TS\", isDone: false}\r\n        ],\r\n        [todolistID_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Coke\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: false}\r\n        ],\r\n    })\r\n\r\n    const updateTask = (todolistID: string, taskID: string, title: string) => {\r\n        setTasks({...tasks, [todolistID] : tasks[todolistID].map(el => el.id === taskID ? {...el, title} : el)})\r\n    }\r\n    const updateTodolist = (todolistID: string, title: string) => {\r\n        setTodolist(todolist.map(el => el.id === todolistID ? {...el, title} : el))\r\n    }\r\n    //Удаляем таску, отфильтровываем массив обьектов и создаем новый массив уже без удаленного\r\n    const removeTask = (todolistID: string, taskID: string) => {\r\n        // => true (filter засовывает в массив обьекты если значение true)\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(el => el.id !== taskID)});\r\n    }\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolist(todolist.filter(el => el.id !== todolistID))\r\n        delete tasks[todolistID];\r\n        setTasks({...tasks})\r\n    }\r\n    // Добавление нового таска в массив\r\n    const addTask = (todolistID: string, title: string) => {\r\n        // копируем массив тасков и добавляем первым в него новый обьект\r\n        const task = {id: v1(), title, isDone: false};\r\n        setTasks({...tasks, [todolistID]: [task, ...tasks[todolistID]]})\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        const newID = v1();\r\n        setTodolist([{id: newID, title, filter: 'all'}, ...todolist])\r\n        setTasks({...tasks, [newID]: []})\r\n    }\r\n\r\n    const changeTaskStatus = (todolistID: string, taskID: string, isDone: boolean) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(el => el.id === taskID ? {...el, isDone} : el)})\r\n    }\r\n\r\n    const changeFilter = (todolistID: string, value: FilterValuesType) => {\r\n        let todoList = todolist.find(tl => tl.id === todolistID);\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodolist([...todolist])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <TodoListHeader title={'Your next To do List'}/>\r\n                <InputForm callbackAddValue={addTodolist}/>\r\n            </div>\r\n            {\r\n                todolist.map(el => {\r\n                    let allTodolistTasks = tasks[el.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (el.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                    }\r\n                    if (el.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                    }\r\n\r\n                    return <TodoList\r\n                        key={el.id}\r\n                        title={el.title}\r\n                        todolistID={el.id}\r\n                        tasks={tasksForTodolist}\r\n                        changeFilter={changeFilter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        filter={el.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        updateTask={updateTask}\r\n                        updateTodolist={updateTodolist}\r\n                    />\r\n                })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}