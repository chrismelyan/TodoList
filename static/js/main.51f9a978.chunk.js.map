{"version":3,"sources":["api/todolists-api.ts","features/todolist-list/tasks-reducer.ts","utils/error-utils.ts","components/Login/auth-reducer.ts","app/app-reducer.ts","features/todolist-list/todolist-reducer.ts","app/store.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/todolist-list/todolist/task/Task.tsx","features/todolist-list/todolist/TodoList.tsx","features/todolist-list/TodolistsList.tsx","components/Login/Login.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResultCodeStatuses","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerNetworkError","dispatch","message","setErrorAC","error","setStatusAC","status","handleServerAppError","messages","length","slice","createSlice","name","initialState","reducers","removeTaskAC","state","action","tasks","payload","todolistID","index","findIndex","el","id","taskID","splice","addTaskAC","task","todoListId","unshift","changeTaskStatusAC","changeTaskTitleAC","setTasksAC","extraReducers","builder","addCase","addTodolistAC","todolist","removeTodolistAC","setTodolistsAC","todolists","forEach","t","clearDataAC","tasksReducer","reducer","actions","isLoggedIn","setIsLoggedInAC","value","authReducer","isInitialized","setIsInitializedAC","initialized","appReducer","filter","entityStatus","changeTodolistTitleAC","changeFilterAC","map","changeTodolistEntityStatusAC","todolistReducer","getTodolistsTC","then","todos","res","items","catch","err","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","window","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","AddItemForm","memo","callbackAddValue","useState","setTitle","setError","onClickAddTask","trimmedTitle","trim","TextField","onChange","e","currentTarget","onKeyPress","key","label","className","helperText","disabled","IconButton","color","onClick","AddBox","fontSize","EditableSpan","edit","setEdit","autoFocus","onBlur","callbackUpdate","size","onDoubleClick","Task","removeTask","changeStatus","useCallback","getState","currentTask","find","changeTaskStatusTC","updateTask","Checkbox","checked","Completed","New","TodoList","tasksForTodolist","changeTodolistTitle","changeTodolistTitleTC","changeFilter","addTask","resultCode","success","item","addTaskTC","removeTodolist","Delete","List","Button","TodolistsList","navigate","useNavigate","useEffect","addTodolist","addTodolistTC","Grid","container","style","padding","Paper","background","spacing","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","Box","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Menu","Typography","component","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.51f9a978.chunk.js","sourcesContent":["import axios from 'axios'\n\n// TYPES\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    completed: boolean\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\ntype UpdateTaskType = {\n    title: string\n    description: string\n    completed: boolean\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\nexport type ResponseType<D> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\ntype GetTasksResponseType = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string | null\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '344e1d93-75ad-4579-8284-aae71a3ea37e'\n    }\n})\n\n// api\nexport const todolistsAPI = {\n    getTodolist() {\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\n        return instance.put<UpdateTaskType, ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`/todo-lists/${todolistId}/tasks/${taskId}`)\n    }\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data);\n    },\n    logout() {\n        return instance.delete<ResponseType<{}>>('auth/login');\n    },\n    me() {\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me');\n    }\n}\n","import {TaskStatuses, TaskType, todolistsAPI} from \"../../api/todolists-api\";\nimport {AppRootStoreType} from \"../../app/store\";\nimport {setStatusAC} from \"../../app/app-reducer\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {Dispatch} from \"redux\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {addTodolistAC, clearDataAC, removeTodolistAC, setTodolistsAC} from \"./todolist-reducer\";\n\nexport enum ResultCodeStatuses {\n    success = 0,\n    error = 1,\n    captcha = 10\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\nconst initialState: TasksStateType = {}\n\nconst slice = createSlice({\n    name: 'tasks',\n    initialState: initialState,\n    reducers: {\n        removeTaskAC(state, action: PayloadAction<{ taskID: string, todolistID: string }>) {\n            // {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)};\n            const tasks = state[action.payload.todolistID];\n            const index = tasks.findIndex(el => el.id === action.payload.taskID);\n            if (index > -1) {\n                tasks.splice(index, 1);\n            }\n        },\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n            state[action.payload.task.todoListId].unshift(action.payload.task);\n        },\n        changeTaskStatusAC(state, action: PayloadAction<{ todolistID: string, taskID: string, status: TaskStatuses }>) {\n            const tasks = state[action.payload.todolistID];\n            const index = tasks.findIndex(el => el.id === action.payload.taskID);\n            if (index > -1) {\n                tasks[index].status = action.payload.status;\n            }\n        },\n        changeTaskTitleAC(state, action: PayloadAction<{ taskID: string, title: string, todolistID: string }>) {\n            const tasks = state[action.payload.todolistID];\n            const index = tasks.findIndex(el => el.id === action.payload.taskID);\n            if (index > -1) {\n                tasks[index].title = action.payload.title;\n            }\n        },\n        setTasksAC(state, action: PayloadAction<{ tasks: TaskType[], todolistId: string }>) {\n            state[action.payload.todolistId] = action.payload.tasks;\n        }\n    },\n    extraReducers(builder) {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = [];\n        });\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.todolistID];\n        });\n        builder.addCase(setTodolistsAC, (state, action) => {\n            action.payload.todolists.forEach(t => state[t.id] = [])\n        });\n        builder.addCase(clearDataAC, (state, action) => {\n            return {}\n        })\n    }\n})\nexport const tasksReducer = slice.reducer;\nexport const {removeTaskAC, addTaskAC, setTasksAC, changeTaskStatusAC, changeTaskTitleAC} = slice.actions\n\n// THUNK CREATORS\nexport const getTasksTC = (todolistId: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        todolistsAPI.getTasks(todolistId)\n            .then(res => {\n                dispatch(setTasksAC({tasks: res.data.items, todolistId: todolistId}))\n                dispatch(setStatusAC({status: 'succeeded'}))\n            })\n            .catch(err => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        todolistsAPI.deleteTask(todolistId, taskId)\n            .then(() => {\n                dispatch(removeTaskAC({taskID: taskId, todolistID: todolistId}))\n                dispatch(setStatusAC({status: 'succeeded'}))\n            })\n            .catch(err => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const addTaskTC = (todolistId: string, title: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        todolistsAPI.createTask(todolistId, title)\n            .then(res => {\n                if (res.data.resultCode === ResultCodeStatuses.success) {\n                    dispatch(addTaskAC({task: res.data.data.item}));\n                    dispatch(setStatusAC({status: 'succeeded'}));\n                } else {\n                    handleServerAppError(dispatch, res.data)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const changeTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\n    (dispatch: Dispatch,\n     getState: () => AppRootStoreType) => {\n        const allAppTasks = getState().tasks\n        const tasksForCurrentTodo = allAppTasks[todolistId]\n        const currentTask = tasksForCurrentTodo.find(t => t.id === taskId)\n        const model: any = {...currentTask, status}\n        todolistsAPI.updateTask(todolistId, taskId, model)\n            .then(() => {\n                dispatch(changeTaskStatusAC({todolistID: todolistId, taskID: taskId,status: status}))\n            })\n            .catch(err => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }","import {setErrorAC, setStatusAC} from \"../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolists-api\";\n\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\n    dispatch(setErrorAC({error: message}));\n    dispatch(setStatusAC({status: 'failed'}));\n}\n\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\n    dispatch(setErrorAC(data.messages.length ? {error: data.messages[0]} : {error: 'some error'}));\n    dispatch(setStatusAC({status: 'failed'}));\n}","import {setStatusAC} from \"../../app/app-reducer\";\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {AxiosError} from \"axios\";\nimport {ResultCodeStatuses} from \"../../features/todolist-list/tasks-reducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {Dispatch} from \"redux\";\nimport {clearDataAC} from \"../../features/todolist-list/todolist-reducer\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: 'auth',\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\n            state.isLoggedIn = action.payload.value\n        }\n    }\n})\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n\n\n// THUNK CREATORS\nexport const loginTC = (data: LoginParamsType) =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        authAPI.login(data)\n            .then(res => {\n                if (res.data.resultCode === ResultCodeStatuses.success) {\n                    dispatch(setIsLoggedInAC({value: true}));\n                    dispatch(setStatusAC({status: 'succeeded'}));\n                } else {\n                    handleServerAppError(dispatch, res.data)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const logoutTC = () =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        authAPI.logout()\n            .then(res => {\n                if (res.data.resultCode === ResultCodeStatuses.success) {\n                    dispatch(setIsLoggedInAC({value: false}));\n                    dispatch(setStatusAC({status: 'succeeded'}));\n                    dispatch(clearDataAC());\n                } else {\n                    handleServerAppError(dispatch, res.data)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }","import {authAPI} from \"../api/todolists-api\";\nimport {ResultCodeStatuses} from \"../features/todolist-list/tasks-reducer\";\nimport {setIsLoggedInAC} from \"../components/Login/auth-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {AxiosError} from \"axios\";\nimport {Dispatch} from \"redux\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false as boolean\n}\n\nconst slice = createSlice({\n    name: 'app',\n    initialState: initialState,\n    reducers: {\n        setStatusAC (state, action: PayloadAction<{status: RequestStatusType}>) {\n            state.status = action.payload.status\n        },\n        setErrorAC (state, action: PayloadAction<{error: string | null}>) {\n            state.error = action.payload.error\n        },\n        setIsInitializedAC (state, action: PayloadAction<{initialized: boolean}>) {\n            state.isInitialized = action.payload.initialized\n        }\n    }\n})\nexport const appReducer = slice.reducer\nexport const {setStatusAC, setErrorAC, setIsInitializedAC} = slice.actions\n\n// THUNK CREATOR\nexport const initializedAppTC = () =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        authAPI.me().then(res => {\n            if (res.data.resultCode === ResultCodeStatuses.success) {\n                dispatch(setIsLoggedInAC({value: true}));\n                dispatch(setStatusAC({status: 'succeeded'}));\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n            .finally(() => {\n                dispatch(setIsInitializedAC({initialized: true}))\n            })\n    }\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\nimport {RequestStatusType, setStatusAC} from \"../../app/app-reducer\";\nimport {getTasksTC, ResultCodeStatuses} from \"./tasks-reducer\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {Dispatch} from \"redux\";\n\nconst initialState: TodolistDomainType[] = []\n\nexport type FilterValuesType = 'all' | 'active' | 'completed'\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n\nconst slice = createSlice({\n    name: 'todolists',\n    initialState: initialState,\n    reducers: {\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n        },\n        removeTodolistAC(state, action: PayloadAction<{todolistID: string}>) {\n            // state.filter(el => el.id !== action.payload.todolistID);\n            const index = state.findIndex(el => el.id === action.payload.todolistID);\n            if (index > -1) {\n                state.splice(index, 1);\n            }\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{todolistID: string, title: string}>) {\n            // state.map(el => el.id === action.payload.todolistID ? {...el, title: action.payload.title} : el);\n            const index = state.findIndex(el => el.id === action.payload.todolistID);\n            state[index].title = action.payload.title;\n        },\n        changeFilterAC(state, action: PayloadAction<{todolistID: string, value: FilterValuesType}>) {\n            // state.map(el => el.id === action.payload.todolistID ? {...el, filter: action.payload.value} : el);\n            const index = state.findIndex(el => el.id === action.payload.todolistID);\n            state[index].filter= action.payload.value;\n        },\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\n            return action.payload.todolists.map(el => ({...el, filter: 'all', entityStatus: 'idle'}))\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{todolistID: string, status: RequestStatusType}>) {\n            // state.map(el => el.id === action.payload.todolistId ? {...el, entityStatus: action.payload.status} : el);\n            const index = state.findIndex(el => el.id === action.payload.todolistID);\n            state[index].entityStatus = action.payload.status;\n        },\n        clearDataAC(state, action: PayloadAction) {\n            return []\n        }\n    }\n})\n\nexport const todolistReducer = slice.reducer;\nexport const {addTodolistAC,\n    removeTodolistAC,\n    setTodolistsAC,\n    changeTodolistEntityStatusAC,\n    changeTodolistTitleAC,\n    changeFilterAC, clearDataAC} = slice.actions;\n\n// THUNK CREATORS\nexport const getTodolistsTC = () =>\n    (dispatch: any) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        todolistsAPI.getTodolist()\n            .then(data => {\n                dispatch(setTodolistsAC({todolists: data.data}))\n                dispatch(setStatusAC({status: 'succeeded'}))\n                return data.data\n            })\n            .then(todos => {\n                todos.forEach(t => {\n                    dispatch(getTasksTC(t.id))\n                })\n            })\n            .catch(err => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const addTodolistTC = (title: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        todolistsAPI.createTodolist(title)\n            .then(res => {\n                if (res.data.resultCode === ResultCodeStatuses.success) {\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\n                    dispatch(setStatusAC({status: 'succeeded'}))\n                } else {\n                    handleServerAppError(dispatch, res.data)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const deleteTodolistTC = (todolistId: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setStatusAC({status: 'loading'}))\n        dispatch(changeTodolistEntityStatusAC({todolistID: todolistId, status: 'loading'}))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then(() => {\n                dispatch(removeTodolistAC({todolistID: todolistId}))\n                dispatch(setStatusAC({status: 'succeeded'}))\n            })\n            .catch(err => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\nexport const changeTodolistTitleTC = (todolistId: string, title: string) =>\n    (dispatch: Dispatch) => {\n        todolistsAPI.updateTodolist(todolistId, title)\n            .then(() => {\n                dispatch(changeTodolistTitleAC({todolistID: todolistId, title: title}))\n            })\n            .catch(err => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }","import {combineReducers} from \"redux\";\nimport {todolistReducer} from \"../features/todolist-list/todolist-reducer\";\nimport {tasksReducer} from \"../features/todolist-list/tasks-reducer\";\nimport thunk from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {authReducer} from \"../components/Login/auth-reducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n\nexport const rootReducer = combineReducers({\n    todolists: todolistReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\n})\nexport type AppRootStoreType = ReturnType<typeof rootReducer>\n\n// useAppSelector - hook/container with already an applied type of the whole app. No need app type in useSelector now.\nexport const useAppSelector: TypedUseSelectorHook<AppRootStoreType> = useSelector\n\n//@ts-ignore\nwindow.store = store","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useAppSelector} from \"../../app/store\";\nimport {useDispatch} from \"react-redux\";\nimport {setErrorAC} from \"../../app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useAppSelector<string | null>(state => state.app.error);\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setErrorAC({error: null}))\n    };\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\nimport TextField from '@mui/material/TextField';\nimport {IconButton} from \"@mui/material\";\nimport {AddBox} from \"@mui/icons-material\";\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\ntype InputFormType = {\n    callbackAddValue: (title: string) => void\n    entityStatus?: RequestStatusType\n}\nconst AddItemForm: React.FC<InputFormType> = React.memo(({callbackAddValue, entityStatus}) => {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onClickAddTask = () => {\n        const trimmedTitle = title.trim()\n        if (trimmedTitle) {\n            callbackAddValue(trimmedTitle)\n        } else {\n            setError('Title is required')\n        }\n        setTitle('')\n    }\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(null)\n    }\n    const onKeyPressSetTitle = (e: KeyboardEvent<HTMLInputElement>) => {\n        e.key === 'Enter' && onClickAddTask()\n    }\n\n    return (\n        <div>\n            <TextField value={title}\n                       error={!!error}\n                       onChange={onChangeSetTitle}\n                       onKeyPress={onKeyPressSetTitle}\n                       label={'Title'}\n                       className={error ? 'error' : ''}\n                       helperText={error}\n                       disabled={entityStatus === 'loading'}/>\n\n            <IconButton color=\"primary\" onClick={onClickAddTask}>\n                <AddBox fontSize='large'/>\n            </IconButton>\n        </div>\n    );\n})\n\nexport default AddItemForm;\n\n","import React, {ChangeEvent, useState} from 'react';\nimport TextField from '@mui/material/TextField';\nimport {RequestStatusType} from \"../../app/app-reducer\";\n\ntype EditableSpanType = {\n    value: string\n    callbackUpdate: (title: string) => void\n    entityStatus: RequestStatusType\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n        const [edit, setEdit] = useState<boolean>(false);\n        const [title, setTitle] = useState<string>('')\n\n        const activateEditMode = () => {\n            setEdit(true)\n            setTitle(props.value)\n        }\n        const deactivateEditMode = () => {\n            props.callbackUpdate(title)\n            setEdit(false)\n        }\n        const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n            setTitle(e.currentTarget.value)\n        }\n\n        return (\n            edit\n                ? <TextField variant=\"outlined\"\n                             value={title}\n                             onChange={changeTitle}\n                             autoFocus\n                             onBlur={deactivateEditMode}\n                             size={'small'}\n                />\n                : <span onDoubleClick={activateEditMode}>{props.value}</span>\n        );\n    }\n);\n\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react';\nimport {TaskStatuses} from \"../../../../api/todolists-api\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {changeTaskStatusTC, changeTaskTitleAC, removeTaskTC} from \"../../tasks-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\n\ntype TaskPropsType = {\n    todolistID: string\n    id: string\n    status: TaskStatuses\n    title: string\n    entityStatus: RequestStatusType\n}\nconst Task: React.FC<TaskPropsType> = ({todolistID, id, status, title, entityStatus}) => {\n    const dispatch = useDispatch()\n    const removeTask = (taskID: string) => {\n        dispatch(removeTaskTC(taskID, todolistID))\n    }\n    const changeStatus = useCallback((taskID: string, status: TaskStatuses) => {\n        dispatch(changeTaskStatusTC(todolistID, taskID, status))\n    }, [dispatch, todolistID])\n\n    const updateTask = useCallback((taskID: string, title: string) => {\n        dispatch(changeTaskTitleAC({taskID: taskID, title:title, todolistID: todolistID}))\n    }, [dispatch, todolistID])\n\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        changeStatus(id, e.currentTarget.checked\n            ? TaskStatuses.Completed\n            : TaskStatuses.New)\n    }\n    const updateTaskHandler = (title: string) => {\n        updateTask(id, title)\n    }\n\n    return (\n        <div>\n            <Checkbox color={'primary'} onChange={changeTaskStatus} checked={status === TaskStatuses.Completed}/>\n            <EditableSpan entityStatus={entityStatus} value={title} callbackUpdate={updateTaskHandler}/>\n            <IconButton onClick={() => removeTask(id)}>\n                <HighlightOffIcon color={'inherit'}/>\n            </IconButton>\n        </div>\n    );\n};\n\nexport default Task;","import React, {useCallback} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    changeFilterAC, changeTodolistTitleTC, deleteTodolistTC,\n    FilterValuesType, TodolistDomainType\n} from \"../todolist-reducer\";\nimport {AppRootStoreType} from \"../../../app/store\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\nimport {addTaskTC} from \"../tasks-reducer\";\nimport Task from \"./task/Task\";\nimport {Button, IconButton, List} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    todolist: TodolistDomainType\n}\n\nconst TodoList = (props: TodoListPropsType) => {\n    const dispatch = useDispatch()\n    const todolistID = props.todolist.id\n    const entityStatus = useSelector<AppRootStoreType, RequestStatusType>(state => state.app.status);\n\n    let tasksForTodolist = useSelector<AppRootStoreType, TaskType[]>(state => state.tasks[todolistID]);\n    if (props.todolist.filter === \"active\") {\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\n    }\n    if (props.todolist.filter === \"completed\") {\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC(todolistID, title))\n    }, [dispatch, todolistID])\n\n    const changeFilter = useCallback((value: FilterValuesType) => {\n        dispatch(changeFilterAC({todolistID, value}))\n    }, [dispatch, todolistID])\n\n    const addTask = useCallback((title: string) => {\n        dispatch(addTaskTC(todolistID, title))\n    }, [dispatch, todolistID])\n\n    const removeTodolist = useCallback(() => {\n        dispatch(deleteTodolistTC(todolistID))\n    },[dispatch, todolistID])\n\n    return (\n        <div>\n            <div>\n                <h3><EditableSpan\n                    value={props.todolist.title}\n                    callbackUpdate={changeTodolistTitle}\n                    entityStatus={entityStatus}/>\n                    <IconButton onClick={removeTodolist} disabled={entityStatus === 'loading'}>\n                        <Delete/>\n                    </IconButton>\n                </h3>\n                <AddItemForm callbackAddValue={addTask} entityStatus={entityStatus}/>\n            </div>\n            <List>\n                {\n                    tasksForTodolist.map(task => <Task\n                        key={task.id}\n                        todolistID={todolistID}\n                        id={task.id}\n                        status={task.status}\n                        title={task.title}\n                        entityStatus={entityStatus}\n                    />)\n                }\n            </List>\n            <div>\n                <Button variant={props.todolist.filter === 'all' ? 'contained' : 'text'} color={'secondary'}\n                        onClick={() => changeFilter('all')}>All\n                </Button>\n                <Button variant={props.todolist.filter === 'active' ? 'contained' : 'text'} color={'primary'}\n                        onClick={() => changeFilter('active')}>Active\n                </Button>\n                <Button variant={props.todolist.filter === 'completed' ? 'contained' : 'text'} color={'inherit'}\n                        onClick={() => changeFilter('completed')}>Completed\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default TodoList;","import React, {useCallback, useEffect} from 'react';\nimport {addTodolistTC, getTodolistsTC, TodolistDomainType} from \"./todolist-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStoreType, useAppSelector} from \"../../app/store\";\nimport {Grid, Paper} from \"@mui/material\";\nimport TodoList from \"./todolist/TodoList\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst TodolistsList = () => {\n    const dispatch = useDispatch()\n    const todolists = useSelector<AppRootStoreType, TodolistDomainType[]>(state => state.todolists);\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        if(isLoggedIn) {\n            dispatch(getTodolistsTC())\n        } else {\n            navigate('/login')\n        }\n    }, [isLoggedIn])\n\n    const addTodolist = useCallback((title: string) => {\n            dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    return (\n        <div>\n            <Grid container style={{padding: '30px'}}>\n                <Paper style={{padding: '20px', background: 'rgb(255,250,250, 0.9)'}}>\n                    <AddItemForm callbackAddValue={addTodolist}/>\n                </Paper>\n            </Grid>\n            <Grid container spacing={3}>\n                {todolists.map(el => <Grid key={el.id} item>\n                        <Paper style={{padding: '15px', background: 'rgb(255,250,250, 0.9)'}} elevation={3}>\n                            <TodoList todolist={el} key={el.id}/>\n                        </Paper>\n                    </Grid>\n                )}\n            </Grid>\n        </div>\n    );\n};\n\nexport default TodolistsList;","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {Paper} from \"@mui/material\";\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Min password length 3';\n            }\n\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values));\n            formik.resetForm();\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n\n    return <Grid container justifyContent={'center'} style={{padding: '30px'}}>\n        <Grid item justifyContent={'center'}>\n            <Paper style={{padding: '20px', background: 'rgb(255,250,250, 0.9)'}}>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>To log in get registered\n                                <a href={'https://social-network.samuraijs.com/'}\n                                   target={'_blank'}\n                                   rel=\"noopener noreferrer\"> here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p>Email: free@samuraijs.com</p>\n                            <p>Password: free</p>\n                        </FormLabel>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            {formik.touched.email\n                                && formik.errors.email\n                                && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                            <TextField\n                                type=\"password\"\n                                label=\"Password\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('password')}\n                            />\n                            {formik.touched.password\n                                && formik.errors.password\n                                && <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            <FormControlLabel\n                                label={'Remember me'}\n                                control={<Checkbox checked={formik.values.rememberMe}/>}\n                                {...formik.getFieldProps('rememberMe')}\n                            />\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Paper>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {useAppSelector} from \"./store\";\nimport {\n    AppBar,\n    Box,\n    Button, CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\nimport {initializedAppTC, RequestStatusType} from \"./app-reducer\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport TodolistsList from \"../features/todolist-list/TodolistsList\";\nimport {Login} from \"../components/Login/Login\";\nimport {useDispatch} from \"react-redux\";\nimport {logoutTC} from \"../components/Login/auth-reducer\";\n\nfunction App() {\n    const status = useAppSelector<RequestStatusType>(state => state.app.status);\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized);\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\n    const dispatch = useDispatch();\n    const logoutHandler = () => {\n        dispatch(logoutTC());\n    }\n\n    useEffect(() => {\n            dispatch(initializedAppTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar />\n            <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\" color={'secondary'}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        TO DO LIST\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            </Box>\n            <Container fixed>\n                <Routes>\n                    <Route path={'/'} element={<TodolistsList/>}/>\n                    <Route path={'login'} element={<Login/>}/>\n                    <Route path={'404'} element={<h1 style={{textAlign: 'center', color: 'white'}}>404 page not found</h1>}/>\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\n                </Routes>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n    <Provider store={store}>\n    <App />\n    </Provider>\n    </HashRouter>,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}